{
    "_parent_entries": [
        [ "^", "byname", "python_in_shell" ],
        [ "^", "byname", "entry_creator" ]
    ],
    "_producer_rules": [
        [ [ "shell_tool", "can_download_url_from_rclone" ] , [["detect"]], {
                "tool_name": "rclone",
                "tool_path": [ "^", "execute", [[
                    [ "byquery", [ ["extracted", "rclone"] ] ],
                    [ "get_path" ]
                ]]],
                "rclone_remote_name": "mlc_inference",
                "rclone_config_path": [ "AS^IS", "AS^IS", "AS^IS", "^^", "execute", [[
		    [ "get_kernel" ],
                    [ "byquery", [ [ "^^", "substitute", [["rclone_config", "rclone_remote_name=#{rclone_remote_name}#"]] ]]],
                    [ "get_path" ]
                ]]],
                "shell_cmd_templates": {
                    "help": "\"#{tool_path}#\" --help",
                    "version": "\"#{tool_path}#\" --version",
                    "dload": "\"#{tool_path}#\" copy #{url}# \"#{target_path}#\" -P --config \"#{rclone_config_path}#\"",
                    "config_create": "\"#{tool_path}#\" config create \"#{rclone_remote_name}#\" drive config_is_local=false scope=drive.readonly root_folder_id=11tBZvvrh0FCm3XuR5E849K42TqftYdUF --config \"#{rclone_config_path}#\"",
                    "reconnect": "\"#{tool_path}#\" config reconnect \"#{rclone_remote_name}#:\" --config \"#{rclone_config_path}#\""
                },
                "cmd_key": "dload"
        } ],

        [ [ "shell_tool", "can_download_url_from_google_drive" ] , [["detect"]], {
                "tool_name": "gdown",
                "shell_cmd_templates": {
                    "help": "\"#{tool_path}#\" --help",
                    "version": "\"#{tool_path}#\" --version",
                    "dload": "\"#{tool_path}#\" -O \"#{target_path}#\" \"#{url}#\""
                },
                "cmd_key": "dload"
        } ],
        [ [ "shell_tool", "can_download_url_from_google_drive" ] , [["detect"]], {
                "tool_name": "gdown",
                "newborn_parent_names": [ "python_in_shell" ],
                "newborn_name_template": "#{tool_name}#_py#{python_major_dot_minor}#_tool",
                "python_deps": [
                    [ "AS^IS", "^^", "python_sync_pip_package", [[ "python_package", "package_name=gdown" ]] ]
                ],
                "shell_cmd_templates": {
                    "help": "\"#{tool_path}#\" --help",
                    "version": "\"#{tool_path}#\" --version",
                    "dload": "\"#{tool_path}#\" -O \"#{target_path}#\" \"#{url}#\""
                },
                "cmd_key": "dload"
        } ],

        [ [ "shell_tool", "can_download_url_from_zenodo" ] , [["detect"]], {
                "tool_name": "zenodo_get",
                "shell_cmd_templates": {
                    "help": "\"#{tool_path}#\" --help",
                    "version": "\"#{tool_path}#\" --version",
                    "dload": "\"#{tool_path}#\" --output-dir=\"#{record_entry_path}#\" --doi=\"#{url}#\""
                },
                "cmd_key": "dload"
        } ],
        [ [ "shell_tool", "can_download_url_from_zenodo" ] , [["detect"]], {
                "tool_name": "zenodo_get",
                "newborn_parent_names": [ "python_in_shell" ],
                "newborn_name_template": "#{tool_name}#_py#{python_major_dot_minor}#_tool",
                "python_deps": [
                    [ "AS^IS", "^^", "python_sync_pip_package", [[ "python_package", "package_name=zenodo-get" ]] ]
                ],
                "shell_cmd_templates": {
                    "help": "\"#{tool_path}#\" --help",
                    "version": "\"#{tool_path}#\" --version",
                    "dload": "\"#{tool_path}#\" --output-dir=\"#{record_entry_path}#\" --doi=\"#{url}#\""
                },
                "cmd_key": "dload"
        } ],

        [ [ "shell_tool", "can_download_url", "tool_name?=wget" ], [["detect"]], {
                "shell_cmd_templates": {
                    "help": "\"#{tool_path}#\" --help",
                    "version": "\"#{tool_path}#\" --version",
                    "dload": "\"#{tool_path}#\" -O \"#{target_path}#\" #{url}#"
                },
                "cmd_key": "dload"
        } ],
        [ [ "shell_tool", "can_download_url", "tool_name?=curl" ], [["detect"]], {
                "shell_cmd_templates": {
                    "help": "\"#{tool_path}#\" --help",
                    "version": "\"#{tool_path}#\" --version",
                    "dload": "\"#{tool_path}#\" -L -o \"#{target_path}#\" #{url}#",
                    "rest_post": "\"#{tool_path}#\" \"#{url}#\" -H \"Content-Type: application/json\" -d '#{rest_input_json}#'"
                },
                "cmd_key": "dload"
        } ],

        [ [ "shell_tool", "can_extract_tar" ], [["detect"]], {
                "tool_name": "tar",
                "strip_components": 0,
                "uncompression_insert": [ "AS^IS", "AS^IS", "AS^IS", "^^", "case",   [ ["^^", "get", "archive_format"],
                    "tar", "",
                    "tgz", "z",
                    "txz", "J"
                ] ],
                "strip_components_insert": [ "AS^IS", "AS^IS", "AS^IS", "^^", "case",   [ ["^^", "get", "strip_components"],
                    0, ""
                ], {"default_value": ["^^", "substitute", "--strip-components #{strip_components}#"] } ],
                "shell_cmd_templates": {
                    "help": "\"#{tool_path}#\" --help",
                    "version": "\"#{tool_path}#\" --version",
                    "extract": "\"#{tool_path}#\" -#{uncompression_insert}#xvf - -C \"#{target_path}#\" #{strip_components_insert}# < \"#{archive_path}#\""
                },
                "cmd_key": "extract"
        } ],

        [ [ "shell_tool", "can_extract_zip", "tool_name?=unzip"        ], [["detect"]], {
                "shell_cmd_templates": {
                    "help": "\"#{tool_path}#\" --help",
                    "extract": "\"#{tool_path}#\" -d \"#{target_path}#\" \"#{archive_path}#\""
                },
                "cmd_key": "extract"
        } ],
        [ [ "shell_tool", "can_extract_zip", "tool_name?=7z.exe"       ], [["detect"]], {
                "shell_cmd_templates": {
                    "help": "\"#{tool_path}#\" --help",
                    "extract": "\"#{tool_path}#\" x \"#{archive_path}#\" -o\"#{target_path}#\""
                },
                "cmd_key": "extract"
        } ],

        [ [ "shell_tool", "can_uncompress_gz", "tool_name?=7z.exe"     ], [["detect"]], {
                "shell_cmd_templates": {
                    "help": "\"#{tool_path}#\" --help",
                    "uncompress": "\"#{tool_path}#\" e \"#{target_path}#\""
                },
                "cmd_key": "uncompress"
        } ],
        [ [ "shell_tool", "can_uncompress_gz", "tool_name?=gzip.exe"   ], [["detect"]], {
                "shell_cmd_templates": {
                    "help": "\"#{tool_path}#\" --help",
                    "version": "\"#{tool_path}#\" --version",
                    "uncompress": "\"#{tool_path}#\" -d \"#{target_path}#\""
                },
                "cmd_key": "uncompress"
        } ],
        [ [ "shell_tool", "can_uncompress_gz", "tool_name?=gunzip"   ], [["detect"]], {
                "shell_cmd_templates": {
                    "help": "\"#{tool_path}#\" --help",
                    "version": "\"#{tool_path}#\" --version",
                    "uncompress": "\"#{tool_path}#\" \"#{target_path}#\""
                },
                "cmd_key": "uncompress"
        } ],

        [ [ "shell_tool", "can_compute_md5", "tool_name?=md5sum"       ], [["detect"]], { "shell_cmd_with_subs": "'#{tool_path}#' '#{file_path}#' | cut -f 1 -d ' '", "capture_output": true, "exec_suffixes": [""] } ],
        [ [ "shell_tool", "can_compute_md5", "tool_name?=md5sum.exe"   ], [["detect"]], { "shell_cmd_with_subs": "\"#{tool_path}#\" \"#{file_path}#\" | cut -f 1 -d \" \" | sed \"s/\\\\\\\\//g\"", "capture_output": true } ],
        [ [ "shell_tool", "can_compute_md5", "tool_name?=certutil.exe" ], [["detect"]], { "shell_cmd_with_subs": "\"#{tool_path}#\" -hashfile \"#{file_path}#\" MD5 | findstr /v \":\"", "capture_output": true } ],
        [ [ "shell_tool", "can_compute_md5", "tool_name?=md5"          ], [["detect"]], { "shell_cmd_with_subs": "'#{tool_path}#' -r '#{file_path}#' | cut -f 1 -d ' '", "capture_output": true } ],

        [ [ "shell_tool", "can_python", ["desired_python_version", [ "^", "kernel_python_major_dot_minor" ]] ], [["detect"]],
            {   "tool_name": [ "AS^IS", "^^", "substitute", "python#{desired_python_version}#" ],
                "tool_path": [ "^", "python_path" ],
                "shell_cmd_templates": {
                    "version": "\"#{tool_path}#\" --version",
                    "pip_install": "\"#{tool_path}#\" -m pip install #{installable}# --prefix=#{abs_install_dir}# --ignore-installed #{flattened_options}#",
                    "pip_available_versions": "\"#{tool_path}#\" -m pip install #{package_name}#==88.88.88 #{flattened_options}# #{force_binary_str}#"
                },
                "cmd_key": "version",
                "capture_output": true,
                "tool_version": [ "AS^IS", "^^", "execute", [[
                    [ "run", [], { "shell_cmd_with_subs": "\"#{tool_path}#\" --version" } ],
                    [ "split", " " ],
                    [ "__getitem__", 1 ]
                ]] ],
                "major_dot_minor": [ "AS^IS", "^^", "execute", [[
                    [ "get", "tool_version"],
                    [ "rsplit", [".", 1] ],
                    [ "__getitem__", 0 ]
                ]] ]
            }, ["exec_suffixes"]
        ],
        [ [ "shell_tool", "can_python", "desired_python_version.", "source?=detected" ], [["detect"]],
            {   "tool_name": [ "AS^IS", "^^", "substitute", "python#{desired_python_version}#" ],
                "shell_cmd_templates": {
                    "version": "\"#{tool_path}#\" --version",
                    "pip_install": "\"#{tool_path}#\" -m pip install #{installable}# --prefix=#{abs_install_dir}# --ignore-installed #{flattened_options}#",
                    "pip_available_versions": "\"#{tool_path}#\" -m pip install #{package_name}#==88.88.88 #{flattened_options}# #{force_binary_str}#"
                },
                "cmd_key": "version",
                "capture_output": true,
                "tool_version": [ "AS^IS", "^^", "case", [ ["^^", "get", ["tool_path", ""] ],
                    [null,""], [ [ "noop", null ] ] ], { "execute_value": true, "default_value": [
                        [ "run", [], { "shell_cmd_with_subs": "\"#{tool_path}#\" --version" } ],
                        [ "split", " " ],
                        [ "__getitem__", 1 ]
                    ] } ],
                "major_dot_minor": [ "AS^IS", "^^", "execute", [[
                    [ "get", "tool_version" ],
                    0,
                    [ "func", "str" ],
                    [ "rsplit", [".", 1] ],
                    [ "__getitem__", 0 ]
                ]] ]
            }, ["exec_suffixes"]
        ],
        [ [ "shell_tool", "can_python", "desired_python_version.", "source?=built" ], [["detect"]],
            {   "minor_version": [ "AS^IS", "^^", "execute", [[
                    [ "get", "desired_python_version" ],
                    [ "split", "." ],
                    [ "__getitem__", 1 ],
                    0,
                    [ "func", "int" ]
                ]] ],
                "tool_path": [ "AS^IS", "^^", "execute", [[
                    [ "get_kernel" ],
                    [ "byquery", [ ["installed", "python3", [ "minor_version", [ "^^", "get", "minor_version" ] ] ] ] ],
                    [ "get_path" ]
                ]]],
                "shell_cmd_templates": {
                    "version": "\"#{tool_path}#\" --version",
                    "pip_install": "\"#{tool_path}#\" -m pip install #{installable}# --prefix=#{abs_install_dir}# --ignore-installed #{flattened_options}#",
                    "pip_available_versions": "\"#{tool_path}#\" -m pip install #{package_name}#==88.88.88 #{flattened_options}# #{force_binary_str}#"
                },
                "cmd_key": "version",
                "capture_output": true,
                "tool_version": [ "AS^IS", "^^", "execute", [[
                    [ "run", [], { "shell_cmd_with_subs": "\"#{tool_path}#\" --version" } ],
                    [ "split", " " ],
                    [ "__getitem__", 1 ]
                ]] ],
                "major_dot_minor": [ "AS^IS", "^^", "execute", [[
                    [ "get", "tool_version" ],
                    [ "rsplit", [".", 1] ],
                    [ "__getitem__", 0 ]
                ]] ]
            }
        ],
        [ [ "shell_tool", "can_python", "desired_python_version!." ], [["detect"]],
            {   "tool_name": [ "AS^IS", "^^", "substitute", "python#{desired_python_version}#", { "desired_python_version": ["^", "kernel_python_major_dot_minor"] } ],
                "tool_path": [ "^", "python_path" ],
                "desired_python_version": ["^", "kernel_python_major_dot_minor"],
                "shell_cmd_templates": {
                    "version": "\"#{tool_path}#\" --version",
                    "pip_install": "\"#{tool_path}#\" -m pip install #{installable}# --prefix=#{abs_install_dir}# --ignore-installed #{flattened_options}#",
                    "pip_available_versions": "\"#{tool_path}#\" -m pip install #{package_name}#==88.88.88 #{flattened_options}# #{force_binary_str}#"
                },
                "cmd_key": "version",
                "capture_output": true,
                "tool_version": [ "AS^IS", "^^", "execute", [[
                    [ "run", [], { "shell_cmd_with_subs": "\"#{tool_path}#\" --version" } ],
                    [ "split", " " ],
                    [ "__getitem__", 1 ]
                ]] ],
                "major_dot_minor": [ "AS^IS", "^^", "execute", [[
                    [ "get", "tool_version"],
                    [ "rsplit", [".", 1] ],
                    [ "__getitem__", 0 ]
                ]] ]
            }, ["exec_suffixes"]
        ],


        [ [ "shell_tool", "can_git"], [["detect"]], {
                "tool_name": "git",
                "repo_path": ".",
                "shell_cmd_templates": {
                    "version": "\"#{tool_path}#\" --version",
                    "clone": "\"#{tool_path}#\" -C \"#{container_path}#\" clone #{url}# #{clone_options}# \"#{clone_subdir}#\"",
                    "checkout": "\"#{tool_path}#\" -C \"#{repo_path}#\" checkout #{checkout}#",
                    "submodules_1": "\"#{tool_path}#\" -C \"#{repo_path}#\" submodule init",
                    "submodules_2": "\"#{tool_path}#\" -C \"#{repo_path}#\" submodule update --recursive",
                    "pull": "\"#{tool_path}#\" -C \"#{repo_path}#\" pull --ff-only",
                    "branch": "\"#{tool_path}#\" -C \"#{repo_path}#\" branch",
                    "origin_url": "\"#{tool_path}#\" -C #{repo_path}# config --get remote.origin.url",
                    "generic": "\"#{tool_path}#\" -C #{repo_path}# #{rest_of_cmd}#"
                },
                "cmd_key": "version",
                "capture_output": true
        } ],


        [ [ "shell_tool", "can_patch" ], [["detect"]], {
                "tool_name": "patch",
                "shell_cmd_templates": {
                    "help": "\"#{tool_path}#\" --help",
                    "version": "\"#{tool_path}#\" --version",
                    "patch": "\"#{tool_path}#\" -p1 -d \"#{entry_path}#\" -i \"#{abs_patch_path}#\""
                },
                "cmd_key": "patch"
        } ],

        [ [ "shell_tool", "can_gpu", "tool_name?=nvidia-smi"     ], [["detect"]], {
                "shell_cmd_templates": {
                    "count_gpus": "\"#{tool_path}#\" -L | grep -c GPU"
                },
                "cmd_key": "count_gpus",
                "capture_output": true,
                "exec_suffixes": [""]
        } ],
        [ [ "shell_tool", "can_gpu", "tool_name?=nvidia-smi.exe" ], [["detect"]], {
                "shell_cmd_templates": {
                    "count_gpus": "\"#{tool_path}#\" -L | findstr GPU | find /c /v \"\""
                },
                "cmd_key": "count_gpus",
                "capture_output": true
        } ],
        [ [ "shell_tool", "can_gpu", "tool_name?=echo"           ], [["detect"]], {
                "shell_cmd_templates": {
                    "count_gpus": "echo 0"
                },
                "cmd_key": "count_gpus",
                "capture_output": true
        } ],

        [ [ "shell_tool", "can_compile_c", "tool_name?=gcc"      ], [["detect"]], {
                "shell_cmd_templates": {
                    "compile_to_binary": "\"#{tool_path}#\" #{compile_infix}# -o \"#{abs_binary_path}#\" \"#{abs_source_path}#\" #{compile_suffix}#",
                    "compile_to_object": "\"#{tool_path}#\" #{compile_infix}# -c -o \"#{abs_object_path}#\" \"#{abs_source_path}#\" #{compile_suffix}#",
                    "version": "\"#{tool_path}#\" --version"
                },
                "cmd_key": "version",
                "compile_infix": "",
                "compile_suffix": "",
                "capture_output": true
        } ],
        [ [ "shell_tool", "can_compile_c", "tool_name?=clang"    ], [["detect"]], {
                "shell_cmd_templates": {
                    "compile_to_binary": "\"#{tool_path}#\" #{compile_infix}# -o \"#{abs_binary_path}#\" \"#{abs_source_path}#\" #{compile_suffix}#",
                    "compile_to_object": "\"#{tool_path}#\" #{compile_infix}# -c -o \"#{abs_object_path}#\" \"#{abs_source_path}#\" #{compile_suffix}#",
                    "version": "\"#{tool_path}#\" --version"
                },
                "cmd_key": "version",
                "compile_infix": "",
                "compile_suffix": "",
                "capture_output": true
        } ],
        [ [ "shell_tool", "can_compile_c", "tool_name?=cc"       ], [["detect"]], {
                "shell_cmd_templates": {
                    "compile_to_binary": "\"#{tool_path}#\" #{compile_infix}# -o \"#{abs_binary_path}#\" \"#{abs_source_path}#\" #{compile_suffix}#",
                    "compile_to_object": "\"#{tool_path}#\" #{compile_infix}# -c -o \"#{abs_object_path}#\" \"#{abs_source_path}#\" #{compile_suffix}#",
                    "version": "\"#{tool_path}#\" --version"
                },
                "cmd_key": "version",
                "compile_infix": "",
                "compile_suffix": "",
                "capture_output": true
        } ],
        [ [ "shell_tool", "can_compile_c", "tool_name?=cl.exe"   ], [["detect"]], {
                "shell_cmd_templates": {
                    "compile_to_binary": "#{compile_prefix}# \"#{tool_path}#\" #{compile_infix}# /Fe\"#{abs_binary_path}#\" \"#{abs_source_path}#\" #{compile_suffix}#",
                    "compile_to_object": "#{compile_prefix}# \"#{tool_path}#\" #{compile_infix}# /c /Fo\"#{abs_object_path}#\" \"#{abs_source_path}#\" #{compile_suffix}#",
                    "version": "\"#{tool_path}#\""
                },
                "cmd_key": "version",
                "compile_prefix": "vcvars64.bat && ",
                "compile_infix": "",
                "compile_suffix": "",
                "capture_output": true
        } ],
        [ [ "shell_tool", "can_lscpu", "tool_name?=lscpu" ], [["detect"]], {
                "shell_cmd_templates": {
                    "json_output": "\"#{tool_path}#\" -J --output-all",
                    "help": "\"#{tool_path}#\" -h",
                    "version": "\"#{tool_path}#\" -V"
                },
                "cmd_key": "json_output",
                "capture_output": true
        } ],
        [ [ "shell_tool", "can_docker" ], [["detect"]], {
                "tool_name": "docker",
                "shell_cmd_templates": {
                    "help": "\"#{tool_path}#\" help",
                    "version": "\"#{tool_path}#\" version",
                    "build": "\"#{tool_path}#\" #{docker_global_options}# build -t #{docker_image}#:#{docker_image_tag}# #{dockerfile_dir}#",
                    "run": "\"#{tool_path}#\" #{docker_global_options}# run #{docker_options}# #{docker_image}#:#{docker_image_tag}# #{run_in_docker}#",
                    "stop": "\"#{tool_path}#\" #{docker_global_options}# stop #{docker_container}#",
                    "exec": "\"#{tool_path}#\" #{docker_global_options}# exec #{docker_options}# #{docker_container}# #{run_in_docker}#"
                },
                "cmd_key": "run",
                "docker_global_options": "",
                "docker_options": "-it",
                "docker_image": "ubuntu",
                "docker_image_tag": "latest",
                "docker_container": "#{docker_image}#_#{docker_image_tag}#_cont",
                "dockerfile_dir": [ "AS^IS", "AS^IS", "AS^IS", "^^", "execute", [[
                    [ "get_kernel" ],
                    [ "byquery", [[ "dockerfile", [ "docker_image", [ "^^", "get", "docker_image" ] ] ]] ],
                    [ "get_path", "" ]
                ]] ],
                "run_in_docker": "bash"
        } ],
        [ [ "shell_tool", "can_ssh" ], [["detect"]], {
                "tool_name": "ssh",
                "shell_cmd_templates": {
                    "help": "\"#{tool_path}#\" -h",
                    "version": "\"#{tool_path}#\" -V",
                    "run": "\"#{tool_path}#\" #{ssh_options}# #{ssh_hostname}# '#{run_in_ssh}#'"
                },
                "cmd_key": "run",
                "ssh_options": "",
                "ssh_hostname": "chai.a",
                "run_in_ssh": "echo Hello ; hostname"
        } ]
    ],

    "newborn_entry_tags": [ "shell_tool" ],
    "newborn_parent_names": [ "shell" ],
    "newborn_name_template": "#{tool_name}#_tool",
    "newborn_entry_param_names": [ "tool_path" ],

    "capture_output": false,

    "exec_suffixes": [ "^^", "case", [ [ "^", "func", [ "sys.platform.startswith", "win" ] ], true, [ "", ".exe", ".bat", ".com" ], false, [ "" ] ]],

    "tool_path": [ "^^", "which" ],
    "tool_name": [ "^^", "func", [ "os.path.basename", ["^^", "get", "tool_path"] ] ]
}
